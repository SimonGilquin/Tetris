// Generated by CoffeeScript 1.6.3
(function() {
  var GetChar, canvas, checkItem, context, cubeTemplate, current, draw, drawElement, drawElementItem, getNewBlock, grid, gridMaxX, gridMaxY, move, moveDown, play, showGrid, updateGrid,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  context = null;

  canvas = null;

  gridMaxX = 10;

  gridMaxY = 40;

  current = null;

  showGrid = 0;

  cubeTemplate = {
    color: "red",
    path: []
  };

  cubeTemplate.path.push({
    x: 0,
    y: 0
  });

  cubeTemplate.path.push({
    x: 1,
    y: 0
  });

  cubeTemplate.path.push({
    x: 0,
    y: 1
  });

  cubeTemplate.path.push({
    x: 1,
    y: 1
  });

  grid = {
    occuped: [],
    drawColumn: function() {
      var i, _i, _j, _results;
      if (showGrid === 1) {
        context.beginPath();
        for (i = _i = 0; _i <= gridMaxX; i = _i += 1) {
          context.moveTo(i * 15, 0);
          context.lineTo(i * 15, gridMaxY * 15);
          context.stroke();
        }
        _results = [];
        for (i = _j = 0; _j <= gridMaxY; i = _j += 1) {
          context.moveTo(0, i * 15);
          context.lineTo(gridMaxX * 15, i * 15);
          _results.push(context.stroke());
        }
        return _results;
      }
    }
  };

  getNewBlock = function() {
    current = {
      x: gridMaxX / 2,
      y: -1,
      template: cubeTemplate
    };
  };

  window.onload = function() {
    canvas = document.createElement('canvas');
    canvas.width = gridMaxX * 15;
    canvas.height = gridMaxY * 15;
    canvas.style.backgroundColor = "yellowgreen";
    document.body.appendChild(canvas);
    context = canvas.getContext('2d');
    getNewBlock();
    return setInterval(play, 100);
  };

  draw = function() {
    var element, _i, _len, _ref;
    context.clearRect(0, 0, canvas.width, canvas.height);
    grid.drawColumn();
    drawElement(current);
    _ref = grid.occuped;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      element = _ref[_i];
      drawElement(element);
    }
  };

  drawElement = function(element) {
    var item, _i, _len, _ref;
    if ((element.x != null) && (element.y != null)) {
      if (element.color != null) {
        drawElementItem(element.x, element.y, element.color);
      }
      if ((element.template != null) && (element.template.path != null)) {
        _ref = element.template.path;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          item = _ref[_i];
          drawElementItem(element.x + item.x, element.y + item.y, element.template.color);
        }
      }
    }
  };

  drawElementItem = function(x, y, color) {
    context.beginPath();
    context.rect((x * 15) + 1, (y * 15) + 1, 13, 13);
    context.fillStyle = color;
    return context.fill();
  };

  play = function() {
    moveDown(current);
    draw();
  };

  updateGrid = function(element) {
    var item, _i, _len, _ref;
    _ref = element.template.path;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      item = _ref[_i];
      grid.occuped.push({
        x: element.x + item.x,
        y: element.y + item.y,
        color: element.template.color
      });
    }
  };

  moveDown = function(element) {
    var canMove;
    canMove = move(element, 0, 1);
    if (!canMove) {
      updateGrid(current);
      return getNewBlock();
    }
  };

  checkItem = function(x, y) {
    var dummy, list, state;
    dummy = 'found';
    if (y < gridMaxY && x >= 0 && x < gridMaxX) {
      list = (function() {
        var _i, _len, _ref, _results;
        _ref = grid.occuped;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          state = _ref[_i];
          if (x === state.x && y === state.y) {
            _results.push(dummy);
          }
        }
        return _results;
      })();
      if (list.length === 0) {
        return true;
      }
    }
    return false;
  };

  move = function(element, x, y) {
    var canMove, item, _fn, _i, _len, _ref,
      _this = this;
    canMove = true;
    _ref = element.template.path;
    _fn = function() {
      if (!checkItem(element.x + item.x + x, element.y + item.y + y)) {
        canMove = false;
      }
    };
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      item = _ref[_i];
      _fn();
    }
    if (canMove) {
      current.x += x;
      current.y += y;
    }
    return canMove;
  };

  document.onkeydown = function(t) {
    if (t.keyCode === 37) {
      move(current, -1, 0);
    }
    if (t.keyCode === 39) {
      move(current, 1, 0);
    }
  };

  GetChar = function(event) {
    if (__indexOf.call(event, 'which') >= 0) {
      return event.which;
    } else {
      return event.keyCode;
    }
  };

}).call(this);
